load_module modules/ngx_http_modsecurity_module.so;

user  nginx;

worker_processes  1;

error_log  /var/log/nginx/error.log warn;

pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
  modsecurity on;
  modsecurity_rules_file /etc/modsecurity.d/include.conf;

  server_names_hash_bucket_size 64;
  server_names_hash_max_size 512;

  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;

  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

  access_log  /var/log/nginx/access.log  main;

  sendfile        on;
  #tcp_nopush     on;
  keepalive_timeout  65;
  #gzip  on;

  server_tokens off;
  add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";
  add_header X-Frame-Options SAMEORIGIN;
  add_header X-XSS-Protection "1; mode=block";
  add_header X-Content-Type-Options nosniff;
  add_header Referer-Policy origin;
  #add_header Content-Security-Policy "default-src http:, https:; script-src http: 'unsafe-inline' 'unsafe-eval', https: 'unsafe-inline' 'unsafe-eval'; style-src http: , https: 'unsafe-inline'";

  server {
    listen 80;
    server_name "";
    return 400;
  }
  server {
    listen 80;
    server_name gonapps.com www.gonapps.com;
    return 301 https://$server_name$request_uri;
  }
  server {
    listen 443 ssl;
    server_name "";
    ssl_certificate      /srv/server.crt;
    ssl_certificate_key  /srv/server.pem;
    return 400;
  }
  server {
    listen 443 ssl;
    server_name www.gonapps.com;
    ssl_certificate      /srv/server.crt;
    ssl_certificate_key  /srv/server.pem;
     # Disable SSLv3
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    return 301 https://gonapps.com$request_uri;
  }
  server {
    listen 443 ssl deferred;
    server_name gonapps.com;
    ssl_certificate      /srv/server.crt;
    ssl_certificate_key  /srv/server.pem;
    # Disable SSLv3
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    root /usr/share/nginx/html;
    location ~ /\. { return 404; }
    location /blog/ {
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header HOST $http_host;
      proxy_set_header X-NginX-Proxy true;
      #proxy_pass http://127.0.0.1:8001/; # without /blog/
      proxy_pass http://127.0.0.1:8001;
    }
    location /.well-known {
      root /usr/share/nginx/html;
    }
  }
}
